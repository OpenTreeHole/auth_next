basePath: /api
definitions:
  apis.ApikeyResponse:
    properties:
      code:
        type: string
      message:
        type: string
      registered:
        type: boolean
      scope:
        enum:
        - register
        - reset
        type: string
    type: object
  apis.EmailVerifyResponse:
    properties:
      message:
        type: string
      registered:
        type: boolean
      scope:
        enum:
        - register
        - reset
        type: string
    type: object
  apis.IdentityNameResponse:
    properties:
      identity_names:
        items:
          type: string
        type: array
    type: object
  apis.Info:
    properties:
      author:
        type: string
      description:
        type: string
      email:
        type: string
      homepage:
        type: string
      license:
        type: string
      name:
        type: string
      repository:
        type: string
      version:
        type: string
    type: object
  apis.LoginRequest:
    properties:
      email:
        description: email in email blacklist
        type: string
      password:
        minLength: 8
        type: string
    type: object
  apis.PGPMessageResponse:
    properties:
      pgp_message:
        type: string
      user_id:
        type: integer
    type: object
  apis.Question:
    properties:
      analysis:
        description: 题目解析，预留，可选
        type: string
      answer:
        description: |-
          答案描述，单选、判断、多选
          如果是单选题，则只有一个答案
          如果是多选题，则有一个或多个答案
          如果是判断题，则只有一个答案，且只能是 true 或者 false
        items:
          type: string
        minItems: 1
        type: array
      group:
        description: 题目分组，可选或必选
        enum:
        - optional
        - required
        type: string
      id:
        description: 题目 ID，题库解析时自动生成，题库中不必填写，发送给客户端时必须包含
        type: integer
      options:
        description: |-
          选项描述，单选、判断、多选
          有一个或多个选项，如果是判断题，则选项只能是 true 或者 false
          如果 Answer 中的答案不在 Options 中，则会在解析时加到 Options 中
        items:
          type: string
        type: array
      question:
        description: 问题描述
        type: string
      type:
        allOf:
        - $ref: '#/definitions/apis.QuestionType'
        description: 题目类型，单选、判断、多选
        enum:
        - single-selection
        - true-or-false
        - multi-selection
    required:
    - question
    type: object
  apis.QuestionConfig:
    properties:
      questions:
        description: 题目列表
        items:
          $ref: '#/definitions/apis.Question'
        type: array
      spec:
        allOf:
        - $ref: '#/definitions/apis.QuestionSpec'
        description: 出题规格
      version:
        description: 表示题库的版本号，用于判题时判断对应的题库，保障题库的平滑更新，必须填写
        minimum: 1
        type: integer
    required:
    - version
    type: object
  apis.QuestionSpec:
    properties:
      in_order:
        description: 表示是否由题目声明顺序由上到下顺序出题，默认为 false，即乱序出题
        type: boolean
      number_of_questions:
        description: |-
          表示总的题目数量。
          发送题目时，题库中的必做题都会发送，可选题会根据题目数量随机发送。
          如果总的题目数量小于题库中的必做题数量，将会在解析时返回错误。
          如果设置为 0 或者不设置，则题库中的所有题目都会发送
          如果设置为 -1，则题库中的必做题都会发送，可选题不会发送
        type: integer
    type: object
  apis.QuestionType:
    enum:
    - single-selection
    - true-or-false
    - multi-selection
    type: string
    x-enum-varnames:
    - SingleSelection
    - TrueOrFalse
    - MultiSelection
  apis.RegisterInBatchRequest:
    properties:
      data:
        items:
          $ref: '#/definitions/apis.LoginRequest'
        type: array
    type: object
  apis.RegisterRequest:
    properties:
      email:
        description: email in email blacklist
        type: string
      password:
        minLength: 8
        type: string
      verification:
        maxLength: 6
        minLength: 6
        type: string
    type: object
  apis.ShamirStatusResponse:
    properties:
      current_public_keys:
        items:
          $ref: '#/definitions/models.ShamirPublicKey'
        type: array
      fail_message:
        type: string
      new_public_keys:
        items:
          $ref: '#/definitions/models.ShamirPublicKey'
        type: array
      now_user_id:
        type: integer
      shamir_update_ready:
        type: boolean
      shamir_updating:
        type: boolean
      uploaded_shares_identity_names:
        items:
          type: string
        type: array
      warning_message:
        type: string
    type: object
  apis.SubmitAnswer:
    properties:
      answer:
        description: 答案描述，单选、判断、多选
        items:
          type: string
        minItems: 1
        type: array
      id:
        description: 题目 ID，用于判题，必须填写
        type: integer
    required:
    - id
    type: object
  apis.SubmitRequest:
    properties:
      answers:
        description: 答案列表
        items:
          $ref: '#/definitions/apis.SubmitAnswer'
        minItems: 1
        type: array
      version:
        description: 表示题库的版本号，如果不填会使用最新的版本号判题，建议填写
        type: integer
    required:
    - answers
    type: object
  apis.SubmitResponse:
    properties:
      access:
        type: string
      correct:
        description: 表示是否正确
        type: boolean
      message:
        type: string
      refresh:
        type: string
      wrong_question_ids:
        description: 如果提交的答案不正确，返回错误的题目 ID
        items:
          type: integer
        type: array
    type: object
  apis.TokenResponse:
    properties:
      access:
        type: string
      message:
        type: string
      refresh:
        type: string
    type: object
  apis.UploadPublicKeyRequest:
    properties:
      data:
        description: all standalone public keys
        items:
          type: string
        type: array
    required:
    - data
    type: object
  apis.UploadSharesRequest:
    properties:
      identity_name:
        type: string
      shares:
        items:
          $ref: '#/definitions/apis.UserShare'
        type: array
    required:
    - identity_name
    type: object
  apis.UserShare:
    properties:
      share:
        $ref: '#/definitions/shamir.Share'
      user_id:
        type: integer
    type: object
  big.Int:
    type: object
  common.ErrorDetailElement:
    properties:
      field:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
  common.HttpError:
    properties:
      code:
        type: integer
      detail:
        items:
          $ref: '#/definitions/common.ErrorDetailElement'
        type: array
      message:
        type: string
    type: object
  common.MessageResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.ShamirPublicKey:
    properties:
      armored_public_key:
        type: string
      id:
        type: integer
      identity_name:
        type: string
    type: object
  models.User:
    properties:
      has_answered_questions:
        type: boolean
      id:
        type: integer
      is_admin:
        type: boolean
      joined_time:
        type: string
      last_login:
        type: string
      nickname:
        type: string
      user_id:
        type: integer
    type: object
  shamir.Share:
    properties:
      x:
        $ref: '#/definitions/big.Int'
      "y":
        $ref: '#/definitions/big.Int'
    type: object
host: localhost:8000
info:
  contact:
    email: dev@fduhole.com
    name: Maintainer Chen Ke
    url: https://danxi.fduhole.com/about
  description: Next Generation of Auth microservice integrated with kong for registration
    and issuing tokens
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Open Tree Hole Auth
  version: "2.0"
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Info'
  /debug/register:
    post:
      consumes:
      - application/json
      description: register with email, password, not need verification code
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/apis.TokenResponse'
        "400":
          description: 用户已注册
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      security:
      - ApiKeyAuth: []
      summary: register, debug only
      tags:
      - account
  /debug/register/_batch:
    post:
      consumes:
      - application/json
      description: register with email, password, not need verification code
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.RegisterInBatchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/apis.TokenResponse'
        "400":
          description: 用户已注册
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      security:
      - ApiKeyAuth: []
      summary: register in batch, debug only
      tags:
      - account
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password, return jwt token, not need jwt
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: Login
      tags:
      - token
  /logout:
    get:
      description: Logout, clear jwt credential and return successful message, logout,
        jwt needed
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: Logout
      tags:
      - token
  /refresh:
    post:
      description: Refresh jwt token with refresh token in header, login required
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.TokenResponse'
      summary: Refresh jwt token
      tags:
      - token
  /register:
    post:
      consumes:
      - application/json
      description: register with email, password and verification code
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/apis.TokenResponse'
        "400":
          description: 验证码错误、用户已注册
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: register
      tags:
      - account
    put:
      consumes:
      - application/json
      description: reset password, reset jwt credential
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.TokenResponse'
        "400":
          description: 验证码错误
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: reset password
      tags:
      - account
  /register/questions:
    get:
      description: Retrieve questions
      parameters:
      - description: version
        in: query
        name: version
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.QuestionConfig'
      summary: Retrieve questions
      tags:
      - question
  /register/questions/_answer:
    post:
      description: Answer questions
      parameters:
      - description: answers
        in: body
        name: answers
        required: true
        schema:
          $ref: '#/definitions/apis.SubmitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: answer correct or not
          schema:
            $ref: '#/definitions/apis.SubmitResponse'
        "400":
          description: already answered, or bad request
          schema:
            $ref: '#/definitions/common.HttpError'
        "403":
          description: forbidden
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: internal server error
          schema:
            type: string
      summary: Answer questions
      tags:
      - question
  /register/questions/_reload:
    post:
      description: Reload questions, admin only
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: forbidden
          schema:
            $ref: '#/definitions/common.HttpError'
        "500":
          description: internal server error
          schema:
            type: string
      summary: Reload questions
      tags:
      - question
  /shamir:
    get:
      parameters:
      - description: recipient uid
        in: query
        name: identity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apis.PGPMessageResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: list related shamir PGP messages
      tags:
      - shamir
  /shamir/{user_id}:
    get:
      parameters:
      - description: Target UserID
        in: path
        name: user_id
        required: true
        type: integer
      - in: query
        name: identity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.PGPMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: get shamir PGP message
      tags:
      - shamir
  /shamir/key:
    post:
      parameters:
      - description: public keys
        in: body
        name: public_keys
        required: true
        schema:
          $ref: '#/definitions/apis.UploadPublicKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/common.MessageResponse'
              - properties:
                  data:
                    $ref: '#/definitions/apis.IdentityNameResponse'
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "403":
          description: 非管理员
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: upload all PGP PublicKeys for encryption, admin only
      tags:
      - shamir
  /shamir/refresh:
    put:
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: trigger for refresh uploaded shares
      tags:
      - shamir
  /shamir/shares:
    post:
      parameters:
      - description: shares
        in: body
        name: shares
        required: true
        schema:
          $ref: '#/definitions/apis.UploadSharesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/apis.IdentityNameResponse'
              type: object
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/common.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/apis.IdentityNameResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: upload all shares of all users, cached
      tags:
      - shamir
  /shamir/status:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.ShamirStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "403":
          description: 非管理员
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: get shamir info
      tags:
      - shamir
  /shamir/update:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "403":
          description: 非管理员
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: trigger for updating shamir
      tags:
      - shamir
  /users:
    get:
      description: list all users, admin only, not implemented
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "403":
          description: 不是管理员
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: list all users
      tags:
      - user
  /users/{user_id}:
    get:
      description: get user by id in path, owner or admin
      parameters:
      - description: UserID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: 不是该用户或管理员
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "404":
          description: 用户不存在
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: get user by id
      tags:
      - user
    put:
      description: modify user, owner or admin
      parameters:
      - description: UserID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: 不是管理员
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: modify user
      tags:
      - user
  /users/admin:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: list admins
      tags:
      - user
  /users/me:
    delete:
      description: delete user and related jwt credentials
      parameters:
      - description: email, password
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.LoginRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: 密码错误“
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "404":
          description: 用户不存在“
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: delete user
      tags:
      - account
    get:
      description: get user by verifying user token or header
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: 用户不存在
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: get current user
      tags:
      - user
  /verify/apikey:
    get:
      deprecated: true
      description: verify with email in query, return verification code
      parameters:
      - in: query
        name: apikey
        type: string
      - default: false
        description: if true, return whether registered
        in: query
        name: check_register
        type: boolean
      - description: email in email blacklist
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户未注册
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "403":
          description: apikey不正确
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "409":
          description: 用户已注册
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: verify with email in query and apikey
      tags:
      - account
  /verify/email:
    get:
      description: verify with email in query, Send verification email
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      - description: scope
        in: query
        name: scope
        type: string
      - description: check
        in: query
        name: check
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.EmailVerifyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: verify with email in query
      tags:
      - account
  /verify/email/{email}:
    get:
      deprecated: true
      description: verify with email in path, send verification email
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: scope
        in: query
        name: scope
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.EmailVerifyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: verify with email in path
      tags:
      - account
swagger: "2.0"
